package com.swaggertest.demo;

import com.alibaba.fastjson.JSONObject;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.swaggertest.demo.dao.PmsMapper;
import com.swaggertest.demo.domain.dto.CmsMoreDeliveryResultInfoDTO;
import com.swaggertest.demo.domain.dto.TestDto;
import com.swaggertest.demo.utils.DateUtil;
import org.apache.commons.lang3.StringEscapeUtils;
import org.apache.commons.lang3.StringUtils;
import org.assertj.core.util.Lists;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.util.Assert;
import org.springframework.web.bind.annotation.ResponseBody;

import java.io.IOException;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.*;
import java.time.temporal.ChronoUnit;
import java.time.temporal.TemporalAdjusters;
import java.util.*;
import java.util.stream.Collectors;

@RunWith(SpringJUnit4ClassRunner.class)
@SpringBootTest(classes = DemoApplication.class)
@ResponseBody
public class DemoApplicationTest6 {


    @Test
    public void test1(){
        //获取当前日期
        LocalDate today = LocalDate.now();
        System.out.println(today);
        // 取本月第1天：
        LocalDate firstDayOfThisMonth = today.with(TemporalAdjusters.firstDayOfMonth());
        System.out.println(firstDayOfThisMonth);
        // 取本月第2天：
        LocalDate secondDayOfThisMonth = today.withDayOfMonth(1);
        System.out.println(secondDayOfThisMonth);
        // 取本月最后一天，再也不用计算是28，29，30还是31：
        LocalDate lastDayOfThisMonth = today.with(TemporalAdjusters.lastDayOfMonth());
        System.out.println(lastDayOfThisMonth);
        // 取下一天：
        LocalDate firstDayOfNextMonth = today.plusDays(1);
        System.out.println(firstDayOfNextMonth);
        LocalDate zuotian = today.minusDays(1);
        System.out.println("打印昨天"+zuotian);
        // 取2017年1月第一个周一：
        LocalDate firstMondayOf2017 = LocalDate.parse("2017-01-01").with(TemporalAdjusters.firstInMonth(DayOfWeek.MONDAY));
        System.out.println(firstMondayOf2017);


        //localDate转Date
        ZoneId zoneId = ZoneId.systemDefault();
        ZonedDateTime zdt = zuotian.atStartOfDay(zoneId);

        Date date = Date.from(zdt.toInstant());
        System.out.println("LocalDate转成date类型"+ date);
        Instant instant = date.toInstant();
        LocalDate localFromDate = instant.atZone(zoneId).toLocalDate();
        System.out.println("date转成LocalDate类型 = " + localFromDate);
    }

    @Test
    public void test2(){
        //1代表湖南省
        String str = "1,2,3,4,11,12,13,14";
        List<String> pureCodes = Arrays.asList(str.split(","));

        //判断是否包含1
        Boolean flag = pureCodes.contains("1");
        System.out.println(flag);

    }

    @Test
    public void test3(){
        BigDecimal prePrice = new BigDecimal(8.52);
        BigDecimal validPrice = new BigDecimal(8.81);
        double result = validPrice.subtract(prePrice).divide(prePrice, 4, 2).doubleValue();
        System.out.println(String.valueOf(Double.valueOf(String.format("%.2f", result * 100 ))) + "%");
    }

    @Test
    public void test4(){
        TestDto testDto = new TestDto();
        if(testDto.getFlag()){
            System.out.println("我这个等于Y");
        }
    }

    @Test
    public void test5(){
        List<TestDto> testDtos = new ArrayList<>();

        TestDto t1 = new TestDto();
        t1.setCatId(1L);
        t1.setSdept("我是1");

        TestDto t2 = new TestDto();
        t2.setCatId(3L);
        t2.setSdept("我是2");

        TestDto t3 = new TestDto();
        t3.setCatId(2L);
        t3.setSdept("我是3");

        TestDto t4 = new TestDto();
        t4.setCatId(8L);
        t4.setSdept("我是4");

        TestDto t5 = new TestDto();
        t5.setCatId(6L);
        t5.setSdept("我是5");

        testDtos.add(t1);
        testDtos.add(t2);
        testDtos.add(t3);
        testDtos.add(t4);
        testDtos.add(t5);
        System.out.println(JSONObject.toJSON(testDtos));

//        testDtos = testDtos.stream().sorted(Comparator.comparing(TestDto::getCatId)).collect(Collectors.toList());
//        System.out.println("正排序之后=-=-=-="+JSONObject.toJSONString(testDtos));
        Collections.sort(testDtos, (a, b) -> b.getCatId().compareTo(a.getCatId()));
        System.out.println("反排序之后=-=-=-="+JSONObject.toJSONString(testDtos));

        Boolean flag;
        flag = null == "test";
        System.out.println(flag);

    }

    @Test
    public void test6(){
        List<TestDto> testDtos = new ArrayList<>();

        TestDto t1 = new TestDto();
        t1.setCatId(1L);
        t1.setSdept("我是1");

        TestDto t2 = new TestDto();
        t2.setCatId(3L);
        t2.setSdept("我是2");

        TestDto t3 = new TestDto();
        t3.setCatId(2L);
        t3.setSdept("我是3");

        TestDto t4 = new TestDto();
        t4.setCatId(8L);
        t4.setSdept("我是4");

        TestDto t5 = new TestDto();
        t5.setCatId(6L);
        t5.setSdept("我是5");

        testDtos.add(t1);
//        testDtos.add(t2);
//        testDtos.add(t3);
//        testDtos.add(t4);
//        testDtos.add(t5);
//        System.out.println(JSONObject.toJSONString(testDtos));
//        testDtos.removeIf(v -> "我是3".equals(v.getSdept()));
//        System.out.println(JSONObject.toJSONString(testDtos));
        System.out.println(StringUtils.join(testDtos,","));

    }

    @Test
    public void test7(){
        SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmmss");

        Date date = new Date();
        String test = sdf.format(date);
        System.out.println(test);

    }

    @Test
    public void test8() throws ParseException {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        String date = "1593705600000";

        Date test = sdf.parse(sdf.format(new Date(date)));
        System.out.println(test);

    }

    @Test
    public void test9(){
        String date =  "1590508800000";
        LocalDate localDate = Instant.ofEpochMilli(Long.valueOf(date)).atZone(ZoneOffset.ofHours(8)).toLocalDate();

        System.out.println(localDate);
    }

    @Test
    public void test10(){
        StringBuilder sb = new StringBuilder("     ");
        System.out.println(sb.length());
        if(sb.length() > 0){
            System.out.println("输出东西");
        }
        sb.append("我是傻子、");

        if(StringUtils.isEmpty(sb)){
            System.out.println("我是个啥子");
        }
        sb.deleteCharAt(sb.length() - 1);
        System.out.println(sb.toString());

    }

    @Test
    public void test11(){
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        LocalDate nextYears = LocalDate.now().plus(1, ChronoUnit.YEARS);

        Date date = Date.from(nextYears.atStartOfDay().atZone(ZoneId.systemDefault()).toInstant());
        Date now = new Date();
        System.out.println("一年后的日期为: "+nextYears);
        if(now.compareTo(date) > 0){
            System.out.println("说明比他大");
        }else if(now.compareTo(date) == 0){
            System.out.println("两个时间相等");
        }else if(now.compareTo(date) < 0){
            System.out.println("说明new比date小");
        }


        System.out.println(date);


        Calendar cal = Calendar.getInstance();
        cal.setTime(now);
        cal.add(Calendar.YEAR, 1);
        Date test = cal.getTime();
        System.out.println("输出当前时间加一年="+ sdf.format(test));
    }

    @Test
    public void test12(){
        List<String> test = Lists.newArrayList("caonumber,testname");
        System.out.println(StringUtils.join(test,","));
    }

}



